// Generated by CoffeeScript 1.8.0

/*
 * Modal
 * https://github.com/laurentguilbert/modal
 *
 * Copyright (c) 2015 Laurent Guilbert
 * Released under the MIT license.
 */

(function() {
  (function(factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], factory);
    } else if (typeof exports === 'object') {
      return factory(require('jquery'));
    } else {
      return window.Modal = factory(jQuery);
    }
  })(function($) {
    var Modal, defaults, moduleName;
    moduleName = 'Modal';
    defaults = {
      appendTo: 'body',
      fadeIn: 100,
      keyboardClose: true,
      overlay: true,
      overlayClose: true,
      closeButton: true,
      closeButtonTemplate: '<div class="modal-close"><span class="modal-close-icon"></span></div>',
      keyboardYes: true,
      yesText: 'Yes',
      noText: 'No',
      confirmModalTemplate: '<div class="confirm-modal"><div class="confirm-modal-content"></div><button class="confirm-modal-no"></button><button class="confirm-modal-yes"></button></div>'
    };
    return Modal = (function() {
      function Modal(options) {
        this.defaults = defaults;
        this.options = $.extend(defaults, options);
        this._name = moduleName;
        $(document).on('keydown', (function(_this) {
          return function(e) {
            switch (e.keyCode) {
              case 27:
                if (_this.options.keyboardClose) {
                  return _this.close();
                }
                break;
              case 13:
                if ((_this.$yesButton != null) && _this.$yesButton.is(':visible') && _this.options.keyboardYes) {
                  return _this.$yesButton.trigger('click');
                }
            }
          };
        })(this));
        if (this.options.overlay) {
          this.$overlay = $('<div class="modal-overlay">').css({
            display: 'none',
            position: 'fixed',
            top: 0,
            left: 0,
            height: '100%',
            width: '100%',
            zIndex: 1000,
            backgroundColor: 'black',
            opacity: 0.7
          });
          if (this.options.overlayClose) {
            this.$overlay.on('click', (function(_this) {
              return function() {
                return _this.close();
              };
            })(this));
          }
        }
        $((function(_this) {
          return function() {
            $(_this.options.appendTo).append(_this.$overlay);
            return $('[data-modal-trigger]').on('click', function(e) {
              var modalId;
              modalId = $(e.target).data('modal-trigger');
              return _this.show(modalId);
            });
          };
        })(this));
        return;
      }

      Modal.prototype.showModal = function($modal) {
        var $close;
        if (this.options.closeButton && !$modal.find('.modal-close').length) {
          $close = $(this.options.closeButtonTemplate).css({
            position: 'absolute',
            right: '10px',
            top: '10px'
          });
          $close.on('click', (function(_this) {
            return function() {
              return _this.close();
            };
          })(this));
          $modal.append($close);
        }
        $modal.css({
          left: '-200%',
          position: 'fixed',
          top: '50%',
          zIndex: 1001
        });
        $modal.show();
        $modal.css({
          marginLeft: -$modal.outerWidth() / 2,
          marginTop: -$modal.outerHeight() / 2
        });
        $modal.hide();
        $modal.css('left', '50%');
        if (this.options.overlay) {
          this.$overlay.fadeIn(this.options.fadeIn);
        }
        $modal.fadeIn(this.options.fadeIn);
        return $modal;
      };

      Modal.prototype.confirm = function(options) {
        if (this.$confirmModal == null) {
          this.$confirmModal = $(this.options.confirmModalTemplate).css({
            display: 'none',
            position: 'absolute',
            top: '50%',
            zIndex: 1002
          });
          this.$yesButton = this.$confirmModal.find('.confirm-modal-yes');
          this.$noButton = this.$confirmModal.find('.confirm-modal-no');
          $(this.options.appendTo).append(this.$confirmModal);
        }
        this.$yesButton.off('click');
        this.$yesButton.on('click', (function(_this) {
          return function() {
            if (options.yesCallback != null) {
              options.yesCallback();
            }
            return _this.close();
          };
        })(this));
        this.$noButton.off('click');
        this.$noButton.on('click', (function(_this) {
          return function() {
            if (options.noCallback != null) {
              options.noCallback();
            }
            return _this.close();
          };
        })(this));
        this.$confirmModal.find('.confirm-modal-content').html(options.content || '');
        this.$yesButton.html(options.yesText || this.options.yesText);
        this.$noButton.html(options.noText || this.options.noText);
        this.showModal(this.$confirmModal);
      };

      Modal.prototype.show = function(modalId) {
        var $modal;
        $modal = $('[data-modal="' + modalId + '"]');
        if (!$modal.length) {
          return;
        }
        return this.showModal($modal);
      };

      Modal.prototype.close = function() {
        $('[data-modal]:visible').hide();
        if (this.options.overlay) {
          this.$overlay.hide();
        }
        if ((this.$confirmModal != null) && this.$confirmModal.is(':visible')) {
          this.$confirmModal.hide();
        }
      };

      return Modal;

    })();
  });

}).call(this);
