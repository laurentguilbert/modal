// Generated by CoffeeScript 1.9.0

/*
 * Modal
 * https://github.com/laurentguilbert/modal
 * Copyright (c) 2015 Laurent Guilbert
 * Released under the MIT license.
 */

(function() {
  $(function() {
    "use strict";
    var Modal, defaults;
    defaults = {
      appendTo: 'body',
      fadeIn: 100,
      keyboardClose: true,
      overlay: true,
      overlayClose: true,
      closeButton: true,
      closeButtonTemplate: '<div class="modal-close"><span class="modal-close-icon"></span></div>',
      keyboardYes: true,
      yesText: 'Yes',
      noText: 'No',
      modalConfirmationTemplate: '<div class="modal" data-role="confirmation"><div class="modal-content"></div><div class="modal-buttons"><button class="modal-no"></button><button class="modal-yes"></button></div> </div>',
      notificationDuration: 5000,
      modalNotificationTemplate: '<div class="modal" data-role="notification"><div class="modal-content"></div></div>'
    };
    Modal = (function() {
      function Modal(options) {
        this.defaults = defaults;
        this.options = $.extend(defaults, options);
        $(document).on('keydown', (function(_this) {
          return function(e) {
            switch (e.keyCode) {
              case 27:
                if (_this.options.keyboardClose) {
                  return _this.close();
                }
                break;
              case 13:
                if ((_this.$yesButton != null) && _this.$yesButton.is(':visible') && _this.options.keyboardYes) {
                  return _this.$yesButton.trigger('click');
                }
            }
          };
        })(this));
        if (this.options.overlay) {
          this.$overlay = $('<div class="modal-overlay">').css({
            display: 'none',
            position: 'fixed',
            top: 0,
            left: 0,
            height: '100%',
            width: '100%',
            zIndex: 1000,
            backgroundColor: 'black',
            opacity: 0.7
          });
          if (this.options.overlayClose) {
            this.$overlay.on('click', (function(_this) {
              return function() {
                return _this.close();
              };
            })(this));
          }
          $(this.options.appendTo).append(this.$overlay);
          $('[data-modal-trigger]').on('click', (function(_this) {
            return function(e) {
              var modalId;
              modalId = $(e.target).data('modal-trigger');
              return _this.show(modalId);
            };
          })(this));
        }
        return;
      }

      Modal.prototype._open = function($modal) {
        var $close;
        if (this.options.closeButton && !$modal.find('.modal-close').length) {
          $close = $(this.options.closeButtonTemplate).css({
            position: 'absolute',
            right: '10px',
            top: '10px'
          });
          $close.on('click', (function(_this) {
            return function() {
              return _this.close();
            };
          })(this));
          $modal.append($close);
        }
        $modal.css({
          left: '-200%',
          position: 'fixed',
          top: '50%',
          zIndex: 1001
        });
        $modal.show();
        $modal.css({
          marginLeft: -$modal.outerWidth() / 2,
          marginTop: -$modal.outerHeight() / 2
        });
        $modal.hide();
        $modal.css('left', '50%');
        return $modal.fadeIn(this.options.fadeIn);
      };

      Modal.prototype.confirm = function(options) {
        if (this.$modalConfirmation == null) {
          this.$modalConfirmation = $(this.options.modalConfirmationTemplate).hide();
          this.$yesButton = this.$modalConfirmation.find('.modal-yes');
          this.$noButton = this.$modalConfirmation.find('.modal-no');
          $(this.options.appendTo).append(this.$modalConfirmation);
        }
        this.$yesButton.off('click');
        this.$yesButton.on('click', (function(_this) {
          return function() {
            if (options.yesCallback != null) {
              options.yesCallback();
            }
            return _this.close();
          };
        })(this));
        this.$noButton.off('click');
        this.$noButton.on('click', (function(_this) {
          return function() {
            if (options.noCallback != null) {
              options.noCallback();
            }
            return _this.close();
          };
        })(this));
        this.$modalConfirmation.find('.modal-content').html(options.content || '');
        this.$yesButton.html(options.yesText || this.options.yesText);
        this.$noButton.html(options.noText || this.options.noText);
        if (this.options.overlay) {
          this.$overlay.fadeIn(this.options.fadeIn);
        }
        this._open(this.$modalConfirmation);
      };

      Modal.prototype.notify = function(options) {
        var fadeNotification;
        if (this.$modalNotification == null) {
          this.$modalNotification = $(this.options.modalNotificationTemplate).css({
            display: 'none',
            position: 'absolute',
            top: '50%',
            zIndex: 1002
          });
          $(this.options.appendTo).append(this.$modalNotification);
        }
        this.$modalNotification.attr('data-level', options.level || 'info');
        this.$modalNotification.find('.modal-content').html(options.content || '');
        this._open(this.$modalNotification);
        fadeNotification = (function(_this) {
          return function() {
            return _this.$modalNotification.fadeOut(_this.options.notificationFadeout);
          };
        })(this);
        return setTimeout(fadeNotification, this.options.notificationDuration);
      };

      Modal.prototype.show = function(modalId) {
        var $modal;
        $modal = $('[data-modal="' + modalId + '"]');
        if (!$modal.length) {
          return;
        }
        if (this.options.overlay) {
          this.$overlay.fadeIn(this.options.fadeIn);
        }
        return this._open($modal);
      };

      Modal.prototype.close = function() {
        $('.modal,[data-modal]').hide();
        if (this.options.overlay) {
          this.$overlay.hide();
        }
      };

      return Modal;

    })();
    window.Modal || (window.Modal = new Modal(typeof modalOptions !== "undefined" && modalOptions !== null ? modalOptions : {}));
  });

}).call(this);
